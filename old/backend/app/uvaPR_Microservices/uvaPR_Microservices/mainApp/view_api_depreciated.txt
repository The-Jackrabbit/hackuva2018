# USERS
def api_get_user_with_id(request, id):
	if request.method == "GET":
		user = User.objects.filter(pk=id).values('pk', 'real_name', 'tag', 'join_date', 'profile_picture')
		result = {'ok': True}
		if len(list(user)) == 0:
			result['status'] = 'Object Not Found'
		else:
			result['status'] = 'ok'
		
		result['result'] = list(user)
		return JsonResponse(result)



# SEASON
def api_get_season_with_id(request, id):
	if request.method == "GET":
		user = Season.objects.filter(pk=id).values('pk', 'name', 'start_date', 'end_date')
		result = {'ok': True}
		if len(list(user)) == 0:
			result['status'] = 'Object Not Found'
		else:
			result['status'] = 'ok'
		
		result['result'] = list(user)
		return JsonResponse(result)

# TOURNAMENT
def api_get_tournament_with_id(request, id):
	if request.method == "GET":
		user = Tournament.objects.filter(pk=id).values('pk', 'date', 'name', 'season')
		result = {'ok': True}
		if len(list(user)) == 0:
			result['status'] = 'Object Not Found'
		else:
			result['status'] = 'ok'
		
		result['result'] = list(user)
		return JsonResponse(result)

# SET
def api_get_set_with_id(request, id):
	if request.method == "GET":
		user = Set.objects.filter(pk=id).values('pk', 'victor', 'child_set', 'player_one', 'player_two')
		result = {'ok': True}
		if len(list(user)) == 0:
			result['status'] = 'Object Not Found'
		else:
			result['status'] = 'ok'
		
		result['result'] = list(user)
		return JsonResponse(result)

# GAME
def api_get_game_with_id(request, id):
	if request.method == "GET":
		user = Game.objects.filter(pk=id).values('pk', 'set', 'round_number', 'victor')
		result = {'ok': True}
		if len(list(user)) == 0:
			result['status'] = 'Object Not Found'
		else:
			result['status'] = 'ok'
		
		result['result'] = list(user)
		return JsonResponse(result)
def api_post_game(request):
	if request.method == "POST":
		return HttpResponse("Hi")
